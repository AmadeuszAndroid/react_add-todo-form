{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","TodoList","todos","map","titleInputId","userInputId","allTodos","userId","usersFromServer","find","App","useState","isTitleEmpty","setIsTitleEmpty","isUserEmpty","setIsUserEmpty","Math","max","maxTodoId","setMaxTodoId","action","method","onSubmit","event","preventDefault","titleInput","document","getElementById","userInput","value","emptyTitle","emptyUser","todoId","push","u","submitForm","htmlFor","type","placeholder","onChange","defaultValue","disabled","ReactDOM","render"],"mappings":"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","file":"static/js/main.ac1293d1.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export type User = {\n  id: number\n  name: string\n  username: string\n  email: string\n};\n\nexport type UserProps = {\n  user: User\n};\n\nexport const UserInfo = ({ user }: UserProps) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import { User, UserInfo } from '../UserInfo';\n\nexport type Todo = {\n  id: number\n  title: string\n  completed: boolean,\n  user: User | undefined,\n};\n\ntype TodoProps = {\n  todo: Todo\n};\n\nexport const TodoInfo = ({ todo }: TodoProps) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={`TodoInfo${completed ? ' TodoInfo--completed' : ''}`}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo, TodoInfo } from '../TodoInfo';\n\ntype TodoListProps = {\n  todos: Todo[]\n};\n\nexport const TodoList = ({ todos }: TodoListProps) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => <TodoInfo key={todo.id} todo={todo} />)}\n  </section>\n);\n","import { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\n\nconst titleInputId = 'title';\nconst userInputId = 'user';\nconst userSelectDefaultValue = '0';\n\nconst allTodos = todosFromServer.map(todo => ({\n  ...todo,\n  user: usersFromServer.find(user => user.id === todo.userId),\n}));\n\nexport const App = () => {\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [isUserEmpty, setIsUserEmpty] = useState(false);\n  const [maxTodoId, setMaxTodoId] = useState(\n    Math.max(...allTodos.map(todo => todo.id)),\n  );\n\n  const submitForm = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const titleInput\n      = document.getElementById(titleInputId) as HTMLInputElement;\n    const userInput\n      = document.getElementById(userInputId) as HTMLInputElement;\n    const title = titleInput?.value;\n    const userId = +userInput?.value;\n    const emptyTitle = title === '';\n    const emptyUser = userId === 0;\n\n    setIsTitleEmpty(emptyTitle);\n    setIsUserEmpty(emptyUser);\n\n    if (!emptyTitle && !emptyUser) {\n      const todoId = maxTodoId + 1;\n\n      allTodos.push({\n        user: usersFromServer.find(u => u.id === userId),\n        id: todoId,\n        completed: false,\n        title,\n        userId,\n      });\n      titleInput.value = '';\n      userInput.value = userSelectDefaultValue;\n      setMaxTodoId(todoId);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={event => {\n          submitForm(event);\n        }}\n      >\n        <div className=\"field\">\n          <label htmlFor={titleInputId}>Title: </label>\n\n          <input\n            id={titleInputId}\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            onChange={() => setIsTitleEmpty(false)}\n          />\n\n          {isTitleEmpty && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor={userInputId}>User: </label>\n\n          <select\n            id={userInputId}\n            data-cy=\"userSelect\"\n            defaultValue=\"0\"\n            onChange={() => setIsUserEmpty(false)}\n          >\n            <option disabled value={userSelectDefaultValue}>\n              Choose a user\n            </option>\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {isUserEmpty && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={allTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}